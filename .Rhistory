theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))#, size = 20))
ggplot(data = wc_win_prop_combine, aes(y = not_host_wins_prop, x = host_win)) +
geom_point() +
geom_text(aes(label = country), hjust = 0.05, vjust = -0.5, angle = 45, size = 2.5) +
ylim(0, 80) +
geom_abline(color = 'red', linetype = 2) +
labs(title = 'Host Country Performance VS when Away',
x = "Proportion of Wins when Away",
y = "Proportion of Wins at Home") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))#, size = 20))
ggplot(data = wc_win_prop_combine, aes(y = not_host_wins_prop, x = host_win)) +
geom_point() +
geom_text_repel(aes(label = country), hjust = 0.1, vjust = -0.5, size = 2.5) +
ylim(0, 80) +
geom_abline(color = 'red', linetype = 2) +
labs(title = 'Host Country Performance VS when Away',
x = "Proportion of Wins when Away",
y = "Proportion of Wins at Home") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))#, size = 20))
ggplot(data = wc_win_prop_combine, aes(y = not_host_wins_prop, x = host_win)) +
geom_point() +
geom_text_repel(aes(label = country), hjust = 0.1, vjust = -0.1, size = 2.5) +
ylim(0, 80) +
geom_abline(color = 'red', linetype = 2) +
labs(title = 'Host Country Performance VS when Away',
x = "Proportion of Wins when Away",
y = "Proportion of Wins at Home") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))#, size = 20))
ggplot(data = wc_win_prop_combine, aes(y = not_host_wins_prop, x = host_win)) +
geom_point() +
geom_text_repel(aes(label = country), hjust = -0.1, vjust = -0.1, size = 2.5) +
ylim(0, 80) +
geom_abline(color = 'red', linetype = 2) +
labs(title = 'Host Country Performance VS when Away',
x = "Proportion of Wins when Away",
y = "Proportion of Wins at Home") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))#, size = 20))
ggplot(data = wc_win_prop_combine, aes(y = not_host_wins_prop, x = host_win)) +
geom_point() +
geom_text_repel(aes(label = country), hjust = -0.5, vjust = -0.1, size = 2.5) +
ylim(0, 80) +
geom_abline(color = 'red', linetype = 2) +
labs(title = 'Host Country Performance VS when Away',
x = "Proportion of Wins when Away",
y = "Proportion of Wins at Home") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))#, size = 20))
ggplot(data = wc_win_prop_combine, aes(y = not_host_wins_prop, x = host_win)) +
geom_point() +
geom_text_repel(aes(label = country), hjust = -0.3, vjust = -0.1, size = 2.5) +
ylim(0, 80) +
geom_abline(color = 'red', linetype = 2) +
labs(title = 'Host Country Performance VS when Away',
x = "Proportion of Wins when Away",
y = "Proportion of Wins at Home") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))#, size = 20))
knitr::opts_chunk$set(echo = TRUE)
library(tidytuesdayR)
library(readr)
library(tidyverse)
library(stringr)
library(forcats)
library(maps)
library(ggthemes)
library(ggrepel)
tuesdata <- tidytuesdayR::tt_load('2022-11-29')
wcmatches <- tuesdata$wcmatches
worldcups <- tuesdata$worldcups
# Code block for the worldcups dataset
# Define different continents
americas <- c("Uruguay", "Brazil", "Chile", "Mexico", "Argentina", "United States")
europe <- c("Italy", "France", "Switzerland", "Sweden", "England", "Germany", "Spain", "West Germany", "Netherlands", "Austria", "Belgium", "Croatia", "Czechoslovakia", "Hungary", "Poland", "Portugal", "Yugoslavia", "Bulgaria", "Soviet Union", "Turkey", "Russia")
others <- c("South Africa", "Japan", "South Korea", "Japan, South Korea")
# Transform the 'worldcups' data frame using pivot_longer
worldcups_tidy <- worldcups %>%
pivot_longer(winner:fourth, names_to = "position_status", values_to = "country_name") %>%
# Rename columns for clarity
rename(host_country = host) %>%
# Standardize country names for the host and participating countries
mutate(
host_country = ifelse(host_country == "USA", "United States", host_country),
country_name = ifelse(country_name == "USA", "United States", country_name)
) %>%
# Create new columns for host and country continents
mutate(
host_continent = case_when(
host_country %in% americas ~ "Americas",
host_country %in% europe ~ "Europe",
host_country %in% others ~ "Rest Of World"
),
country_continent = case_when(
country_name %in% americas ~ "Americas",
country_name %in% europe ~ "Europe",
country_name %in% others ~ "Rest Of World"
)
)
# Code block for the wcmatches dataset
# Rename columns for clarity
wcmatches_tidy <- wcmatches %>%
rename(stage_status = stage, win_outcome = outcome) %>%
# Standardize values in the 'stage_status' column
mutate(
stage_status = ifelse(str_detect(stage_status, "Group"), "Group Stage", stage_status),
stage_status = ifelse(stage_status == "Final Round", "Final", stage_status)
) %>%
# Remove the 'date' column
select(-date) %>%
# Categorize win outcomes for clear representation
mutate(
win_outcome = case_when(
home_score == away_score ~ "Draw",
win_outcome == "H" ~ "Home",
win_outcome == "D" ~ "Draw",
win_outcome == "A" ~ "Away"
)
) %>%
# Feature engineering: Calculate score difference and handle missing values
mutate(
score_difference = abs(home_score - away_score),
win_conditions = replace_na(win_conditions, "Nil"),
# Create binary features based on win conditions
after_extra_time = ifelse(str_detect(win_conditions, "AET"), 1, 0),
penalties = ifelse(str_detect(win_conditions, "penalties"), 1, 0)
)
# The years where the World Cup is supposed to be held on
supposed_years <- seq(1930, 2018, by = 4)
# The years where the World Cup is actually held on, for visualization purposes
actual_years <- wcmatches_tidy %>%
select(year) %>%
distinct()
# Find years that do not exist in actual_years
missing_years <- supposed_years[!(supposed_years %in% actual_years$year)]
missing_years
stages_1934 <- wcmatches_tidy %>%
filter(year == 1934) %>%
select(stage_status) %>%
distinct()
stages_1950 <- wcmatches_tidy %>%
filter(year == 1950) %>%
select(stage_status) %>%
distinct()
stages_1934
stages_1950
# Update win_outcome
wcmatches_updated <- wcmatches_tidy %>%
mutate(win_outcome = ifelse(penalties == 1, "Draw", win_outcome)) %>%
select(home_team, away_team, win_outcome)
# Calculate win points
wcmatches_wins <- wcmatches_updated %>%
filter(win_outcome %in% c("Home", "Away")) %>%
group_by(country = case_when(win_outcome == "Home" ~ home_team, win_outcome == "Away" ~ away_team)) %>%
summarise(win_points = 3 * n())
# Calculate draw points
wcmatches_draws <- wcmatches_updated %>%
filter(win_outcome == "Draw") %>%
pivot_longer(home_team:away_team) %>%
rename(country = value) %>%
select(country) %>%
group_by(country) %>%
summarise(draw_points = n())
# Get unique home and away countries
wcmatches_allcountries <- wcmatches_tidy %>%
select(home_team) %>%
distinct() %>%
rename(country = home_team) %>%
bind_rows(wcmatches_tidy %>%
select(away_team) %>%
distinct() %>%
rename(country = away_team)) %>%
distinct()
# Tabulate the World Cup matches
wcmatches_tabulated <- wcmatches_wins %>%
full_join(wcmatches_draws, by = "country") %>%
full_join(wcmatches_allcountries, by = "country") %>%
mutate(
win_points = replace_na(win_points, 0),
draw_points = replace_na(draw_points, 0),
total_points = win_points + draw_points,
country = case_when(
country %in% c("West Germany", "East Germany") ~ "Germany",
country %in% c("Soviet Union") ~ "Russia",
country %in% c("Yugoslavia", "FR Yugoslavia") ~ "Serbia",
country %in% c("Czechoslovakia") ~ "Czech Republic",
country %in% c("Dutch West Indies") ~ "Indonesia",
country %in% c("Zaire") ~ "Democratic Republic of the Congo",
TRUE ~ country
)
) %>%
group_by(country) %>%
summarise(total_points = sum(total_points))
wcmatches_tabulated
world_map <- map_data("world") %>%
mutate(region = case_when(
region == "USA" ~ "United States",
region == "China" ~ "China PR",
region == "Ireland" ~ "Republic of Ireland",
subregion == "Scotland" ~ "Scotland",
subregion == "Great Britain" ~ "England",
subregion == "Isle of Wight" ~ "England",
subregion == "Wales" ~ "Wales",
subregion == "Northern Ireland" ~ "Northern Ireland",
.default = region)) #%>%
#select(-subregion)
top_countries_joined <- wcmatches_tabulated %>%
full_join(world_map, by = c("country" = "region"))
ggplot(top_countries_joined, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = total_points)) +
labs(title = "Global Distribution of Total Points obtained across World Cups (1930-2018)") +
scale_fill_gradientn(name = "Total Points",
colors = c("#ffffb2", "#fecc5c", "#fd8d3c", "#f03b20", "#bd0026"),
na.value = "white") +
borders(colour = "black", size = 0.1) +
theme_minimal() +
theme(legend.position = "bottom", axis.title = element_blank(), axis.text = element_blank(),
panel.grid = element_blank(), plot.title = element_text(hjust = 0.5)) +
ylim(-60, 90)
# Group stage matches
wc_groupstage_matches <- wcmatches_tidy %>%
filter(stage_status == 'Group Stage', country == home_team) %>%
group_by(year, country) %>%
summarise(group_stage_matches_played = n())
# Knockout stage, non-1950
wc_elimstage_matches <- wcmatches_tidy %>%
filter(year != '1950', stage_status != 'Group Stage') %>%
group_by(year, country) %>%
summarise(elim_matches_played = n_distinct(stage_status))
# Knockout stage, 1950
wc_elimstage_matches1 <- wcmatches_tidy %>%
filter(year == '1950', stage_status != 'Group Stage', country == home_team) %>%
group_by(year, country) %>%
summarise(elim_matches_played = n()) %>%
bind_rows(wc_elimstage_matches)
# Merge group stage and knockout stage
wc_total_matches <- wcmatches_tidy%>%
group_by(winning_team)%>%
summarise(total_win = n())%>%
rename('country' = 'winning_team')
# Total matches played per host country
wc_host_matches_played <- wcmatches_tidy %>%
filter(country == home_team) %>%
group_by(country) %>%
summarise(total_matches_played = n())
# Proportion out of matches played
wc_host_wins_prop <- wc_host_matches_played %>%
full_join(wcmatches_tidy1) %>%
mutate(host_win_proportion = round(host_wins*100/total_matches_played, 2))
# Proportion out of total possible
wcmatches_tidy1 <- wcmatches_tidy %>%
filter(country == home_team, country == winning_team) %>%
select(year, country, stage_status, home_team, win_outcome) %>%
group_by(country) %>%
summarise(host_wins = n())
wc_host_wins <- wcmatches_tidy1 %>%
left_join(wc_total_matches, by = 'country') %>%
group_by(country) %>%
summarise(host_win = round(host_wins * 100 / total_win, 2)) %>%
replace_na(list(proportion_win = 0))
# Wins when country is not host
wc_not_host_wins <- wcmatches_tidy %>%
group_by(winning_team) %>%
summarise(total_wins = n()) %>%
rename(country = winning_team) %>%
full_join(wcmatches_tidy1) %>%
replace_na(list(host_wins = 0)) %>%
mutate(not_host_wins = total_wins - host_wins) %>%
select(country, not_host_wins)
# Matches played as 'home_team' by non-host
home_matches_played <- wcmatches_tidy %>%
filter(country != home_team) %>%
group_by(home_team) %>%
summarise(home_played = n()) %>%
rename(country = home_team)
# Matches played as 'away_team' by non-host
away_matches_played <- wcmatches_tidy %>%
group_by(away_team) %>%
summarise(away_played = n()) %>%
rename(country = away_team)
#Merge all data to find proportion
wc_win_prop_combine <- home_matches_played %>%
full_join(away_matches_played, by = 'country') %>%
full_join(wc_not_host_wins, by = 'country') %>%
replace_na(list(not_host_wins = 0)) %>%
mutate(total_played = home_played + away_played) %>%
group_by(country) %>%
summarise(not_host_wins_prop = round(not_host_wins*100/total_played,2)) %>%
right_join(wc_host_wins, by = 'country')
wcmatches_tidy3 <- wcmatches_tidy%>%
group_by(winning_team)%>%
select(year,country,stage_status,away_team,win_outcome,winning_team)%>%
summarise(actual_win = n())%>%
left_join(wcmatches_tidy2, by = c('winning_team' = 'country'))%>%
na.omit()%>%
mutate(away_win = actual_win - matches_won_hometeam ) %>%
left_join(wcmatches_tidy1, by = c('winning_team' = 'country'))%>%
mutate(proportion_away_win = round(away_win/actual_win * 100,2))%>%
select(winning_team, proportion_away_win)
ggplot(data = wc_win_prop_combine, aes(y= not_host_wins_prop,x = host_win))+
geom_point()+
geom_text(aes(label = country), hjust = 0.05, vjust = -0.5,angle = 45,size = 2.5)+
ylim(0,80)+
geom_abline(color = 'red', linetype = 2) +
labs(title = 'Host Country Performance VS when Away',
x = "Proportion of Wins when Away",
y = "Proportion of Wins at Home") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 20))
knitr::opts_chunk$set(echo = TRUE)
# Group stage matches
wc_groupstage_matches <- wcmatches_tidy %>%
filter(stage_status == 'Group Stage', country == home_team) %>%
group_by(year, country) %>%
summarise(group_stage_matches_played = n())
knitr::opts_chunk$set(echo = TRUE)
library(tidytuesdayR)
library(readr)
library(tidyverse)
library(stringr)
library(forcats)
library(maps)
library(ggthemes)
library(ggrepel)
tuesdata <- tidytuesdayR::tt_load('2022-11-29')
wcmatches <- tuesdata$wcmatches
worldcups <- tuesdata$worldcups
# Code block for the worldcups dataset
# Define different continents
americas <- c("Uruguay", "Brazil", "Chile", "Mexico", "Argentina", "United States")
europe <- c("Italy", "France", "Switzerland", "Sweden", "England", "Germany", "Spain", "West Germany", "Netherlands", "Austria", "Belgium", "Croatia", "Czechoslovakia", "Hungary", "Poland", "Portugal", "Yugoslavia", "Bulgaria", "Soviet Union", "Turkey", "Russia")
others <- c("South Africa", "Japan", "South Korea", "Japan, South Korea")
# Transform the 'worldcups' data frame using pivot_longer
worldcups_tidy <- worldcups %>%
pivot_longer(winner:fourth, names_to = "position_status", values_to = "country_name") %>%
# Rename columns for clarity
rename(host_country = host) %>%
# Standardize country names for the host and participating countries
mutate(
host_country = ifelse(host_country == "USA", "United States", host_country),
country_name = ifelse(country_name == "USA", "United States", country_name)
) %>%
# Create new columns for host and country continents
mutate(
host_continent = case_when(
host_country %in% americas ~ "Americas",
host_country %in% europe ~ "Europe",
host_country %in% others ~ "Rest Of World"
),
country_continent = case_when(
country_name %in% americas ~ "Americas",
country_name %in% europe ~ "Europe",
country_name %in% others ~ "Rest Of World"
)
)
# Code block for the wcmatches dataset
# Rename columns for clarity
wcmatches_tidy <- wcmatches %>%
rename(stage_status = stage, win_outcome = outcome) %>%
# Standardize values in the 'stage_status' column
mutate(
stage_status = ifelse(str_detect(stage_status, "Group"), "Group Stage", stage_status),
stage_status = ifelse(stage_status == "Final Round", "Final", stage_status)
) %>%
# Remove the 'date' column
select(-date) %>%
# Categorize win outcomes for clear representation
mutate(
win_outcome = case_when(
home_score == away_score ~ "Draw",
win_outcome == "H" ~ "Home",
win_outcome == "D" ~ "Draw",
win_outcome == "A" ~ "Away"
)
) %>%
# Feature engineering: Calculate score difference and handle missing values
mutate(
score_difference = abs(home_score - away_score),
win_conditions = replace_na(win_conditions, "Nil"),
# Create binary features based on win conditions
after_extra_time = ifelse(str_detect(win_conditions, "AET"), 1, 0),
penalties = ifelse(str_detect(win_conditions, "penalties"), 1, 0)
)
# The years where the World Cup is supposed to be held on
supposed_years <- seq(1930, 2018, by = 4)
# The years where the World Cup is actually held on, for visualization purposes
actual_years <- wcmatches_tidy %>%
select(year) %>%
distinct()
# Find years that do not exist in actual_years
missing_years <- supposed_years[!(supposed_years %in% actual_years$year)]
missing_years
stages_1934 <- wcmatches_tidy %>%
filter(year == 1934) %>%
select(stage_status) %>%
distinct()
stages_1950 <- wcmatches_tidy %>%
filter(year == 1950) %>%
select(stage_status) %>%
distinct()
stages_1934
stages_1950
# Update win_outcome
wcmatches_updated <- wcmatches_tidy %>%
mutate(win_outcome = ifelse(penalties == 1, "Draw", win_outcome)) %>%
select(home_team, away_team, win_outcome)
# Calculate win points
wcmatches_wins <- wcmatches_updated %>%
filter(win_outcome %in% c("Home", "Away")) %>%
group_by(country = case_when(win_outcome == "Home" ~ home_team, win_outcome == "Away" ~ away_team)) %>%
summarise(win_points = 3 * n())
# Calculate draw points
wcmatches_draws <- wcmatches_updated %>%
filter(win_outcome == "Draw") %>%
pivot_longer(home_team:away_team) %>%
rename(country = value) %>%
select(country) %>%
group_by(country) %>%
summarise(draw_points = n())
# Get unique home and away countries
wcmatches_allcountries <- wcmatches_tidy %>%
select(home_team) %>%
distinct() %>%
rename(country = home_team) %>%
bind_rows(wcmatches_tidy %>%
select(away_team) %>%
distinct() %>%
rename(country = away_team)) %>%
distinct()
# Tabulate the World Cup matches
wcmatches_tabulated <- wcmatches_wins %>%
full_join(wcmatches_draws, by = "country") %>%
full_join(wcmatches_allcountries, by = "country") %>%
mutate(
win_points = replace_na(win_points, 0),
draw_points = replace_na(draw_points, 0),
total_points = win_points + draw_points,
country = case_when(
country %in% c("West Germany", "East Germany") ~ "Germany",
country %in% c("Soviet Union") ~ "Russia",
country %in% c("Yugoslavia", "FR Yugoslavia") ~ "Serbia",
country %in% c("Czechoslovakia") ~ "Czech Republic",
country %in% c("Dutch West Indies") ~ "Indonesia",
country %in% c("Zaire") ~ "Democratic Republic of the Congo",
TRUE ~ country
)
) %>%
group_by(country) %>%
summarise(total_points = sum(total_points))
wcmatches_tabulated
world_map <- map_data("world") %>%
mutate(region = case_when(
region == "USA" ~ "United States",
region == "China" ~ "China PR",
region == "Ireland" ~ "Republic of Ireland",
subregion == "Scotland" ~ "Scotland",
subregion == "Great Britain" ~ "England",
subregion == "Isle of Wight" ~ "England",
subregion == "Wales" ~ "Wales",
subregion == "Northern Ireland" ~ "Northern Ireland",
.default = region)) #%>%
#select(-subregion)
top_countries_joined <- wcmatches_tabulated %>%
full_join(world_map, by = c("country" = "region"))
ggplot(top_countries_joined, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = total_points)) +
labs(title = "Global Distribution of Total Points obtained across World Cups (1930-2018)") +
scale_fill_gradientn(name = "Total Points",
colors = c("#ffffb2", "#fecc5c", "#fd8d3c", "#f03b20", "#bd0026"),
na.value = "white") +
borders(colour = "black", size = 0.1) +
theme_minimal() +
theme(legend.position = "bottom", axis.title = element_blank(), axis.text = element_blank(),
panel.grid = element_blank(), plot.title = element_text(hjust = 0.5)) +
ylim(-60, 90)
# Group stage matches
wc_groupstage_matches <- wcmatches_tidy %>%
filter(stage_status == 'Group Stage', country == home_team) %>%
group_by(year, country) %>%
summarise(group_stage_matches_played = n())
# Knockout stage, non-1950
wc_elimstage_matches <- wcmatches_tidy %>%
filter(year != '1950', stage_status != 'Group Stage') %>%
group_by(year, country) %>%
summarise(elim_matches_played = n_distinct(stage_status))
# Knockout stage, 1950
wc_elimstage_matches1 <- wcmatches_tidy %>%
filter(year == '1950', stage_status != 'Group Stage', country == home_team) %>%
group_by(year, country) %>%
summarise(elim_matches_played = n()) %>%
bind_rows(wc_elimstage_matches)
# Merge group stage and knockout stage
wc_total_matches <- wcmatches_tidy %>%
group_by(winning_team) %>%
summarise(total_win = n()) %>%
rename('country' = 'winning_team')
# Total matches played per host country
wc_host_matches_played <- wcmatches_tidy %>%
filter(country == home_team) %>%
group_by(country) %>%
summarise(total_matches_played = n())
# Proportion out of matches played
wc_host_wins_prop <- wc_host_matches_played %>%
full_join(wcmatches_tidy1) %>%
mutate(host_win_proportion = round(host_wins*100/total_matches_played, 2))
View(wc_groupstage_matches)
View(wc_elimstage_matches)
View(wc_elimstage_matches1)
View(wc_total_matches)
